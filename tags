!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CELL_MINIMUM_ABUNDANCE	./include/cell.h	/^const double CELL_MINIMUM_ABUNDANCE = 1.0E-7;$/;"	v
CellObserver	./include/cellobserver.h	/^    CellObserver ( std::vector <abundance_v> &states, std::vector<double> &times, std::vector<cell_state> &vars, uint32_t store_every_n, uint32_t dump_every_n, size_t cid , const spec_v& foll, network* net);$/;"	p	class:CellObserver	access:public	signature:( std::vector <abundance_v> &states, std::vector<double> &times, std::vector<cell_state> &vars, uint32_t store_every_n, uint32_t dump_every_n, size_t cid , const spec_v& foll, network* net)
CellObserver	./include/cellobserver.h	/^class CellObserver$/;"	c
CellObserver	./src/cellobserver.cpp	/^CellObserver::CellObserver ( std::vector <abundance_v> &states, std::vector<double> &times, std::vector<cell_state> &statevars, uint32_t store_every_n, uint32_t dump_every_n, size_t cid , const spec_v& foll, network* net)$/;"	f	class:CellObserver	signature:( std::vector <abundance_v> &states, std::vector<double> &times, std::vector<cell_state> &statevars, uint32_t store_every_n, uint32_t dump_every_n, size_t cid , const spec_v& foll, network* net)
CellObserver::CellObserver	./include/cellobserver.h	/^    CellObserver ( std::vector <abundance_v> &states, std::vector<double> &times, std::vector<cell_state> &vars, uint32_t store_every_n, uint32_t dump_every_n, size_t cid , const spec_v& foll, network* net);$/;"	p	class:CellObserver	access:public	signature:( std::vector <abundance_v> &states, std::vector<double> &times, std::vector<cell_state> &vars, uint32_t store_every_n, uint32_t dump_every_n, size_t cid , const spec_v& foll, network* net)
CellObserver::CellObserver	./src/cellobserver.cpp	/^CellObserver::CellObserver ( std::vector <abundance_v> &states, std::vector<double> &times, std::vector<cell_state> &statevars, uint32_t store_every_n, uint32_t dump_every_n, size_t cid , const spec_v& foll, network* net)$/;"	f	class:CellObserver	signature:( std::vector <abundance_v> &states, std::vector<double> &times, std::vector<cell_state> &statevars, uint32_t store_every_n, uint32_t dump_every_n, size_t cid , const spec_v& foll, network* net)
CellObserver::dump_abundances	./include/cellobserver.h	/^    void dump_abundances();$/;"	p	class:CellObserver	access:public	signature:()
CellObserver::dump_abundances	./src/cellobserver.cpp	/^void CellObserver::dump_abundances ( )$/;"	f	class:CellObserver	signature:( )
CellObserver::following	./include/cellobserver.h	/^    std::vector<std::string> following;$/;"	m	class:CellObserver	access:private
CellObserver::following_idx	./include/cellobserver.h	/^    std::vector<int> following_idx;$/;"	m	class:CellObserver	access:private
CellObserver::m_ndump	./include/cellobserver.h	/^    uint32_t m_nstore, m_ndump;$/;"	m	class:CellObserver	access:private
CellObserver::m_nstore	./include/cellobserver.h	/^    uint32_t m_nstore, m_ndump;$/;"	m	class:CellObserver	access:private
CellObserver::m_states	./include/cellobserver.h	/^    std::vector<abundance_v> &m_states;$/;"	m	class:CellObserver	access:private
CellObserver::m_times	./include/cellobserver.h	/^    std::vector<double> &m_times;$/;"	m	class:CellObserver	access:private
CellObserver::m_vars	./include/cellobserver.h	/^    std::vector<cell_state> &m_vars;$/;"	m	class:CellObserver	access:private
CellObserver::n_called	./include/cellobserver.h	/^    uint32_t n_called;$/;"	m	class:CellObserver	access:private
CellObserver::ofname	./include/cellobserver.h	/^    std::string   ofname;$/;"	m	class:CellObserver	access:private
CellObserver::ofs	./include/cellobserver.h	/^    std::ofstream ofs;$/;"	m	class:CellObserver	access:private
CellObserver::operator ()	./include/cellobserver.h	/^    void operator() ( const abundance_v &x, const cell_state &s, const double t, const double dt );$/;"	p	class:CellObserver	access:public	signature:( const abundance_v &x, const cell_state &s, const double t, const double dt )
CellObserver::operator ()	./src/cellobserver.cpp	/^void CellObserver::operator() ( const abundance_v &x, const cell_state &s, const double t, const double dt  )$/;"	f	class:CellObserver	signature:( const abundance_v &x, const cell_state &s, const double t, const double dt )
CellObserver::~CellObserver	./include/cellobserver.h	/^    virtual ~CellObserver() {}$/;"	f	class:CellObserver	access:public	signature:()
REACTION_TYPE_NUCLEATE	./include/reaction.h	/^const int REACTION_TYPE_NUCLEATE = 101;$/;"	v
StarChem	./include/starchem.h	/^    StarChem ( const std::string &config_filename );$/;"	p	class:StarChem	access:public	signature:( const std::string &config_filename )
StarChem	./include/starchem.h	/^class StarChem$/;"	c
StarChem	./src/starchem.cpp	/^StarChem::StarChem ( const std::string &config_file )$/;"	f	class:StarChem	signature:( const std::string &config_file )
StarChem::StarChem	./include/starchem.h	/^    StarChem ( const std::string &config_filename );$/;"	p	class:StarChem	access:public	signature:( const std::string &config_filename )
StarChem::StarChem	./src/starchem.cpp	/^StarChem::StarChem ( const std::string &config_file )$/;"	f	class:StarChem	signature:( const std::string &config_file )
StarChem::cell_inputs	./include/starchem.h	/^    std::map<uint32_t, cell_input> cell_inputs;$/;"	m	class:StarChem	access:private
StarChem::cells	./include/starchem.h	/^    std::vector<cell>             cells;$/;"	m	class:StarChem	access:private
StarChem::cleanup	./include/starchem.h	/^    void cleanup() {}$/;"	f	class:StarChem	access:public	signature:()
StarChem::create_simulation_cells	./include/starchem.h	/^    void create_simulation_cells();$/;"	p	class:StarChem	access:public	signature:()
StarChem::create_simulation_cells	./src/starchem.cpp	/^StarChem::create_simulation_cells()$/;"	f	class:StarChem	signature:()
StarChem::following_species	./include/starchem.h	/^    std::vector<std::string>      following_species;$/;"	m	class:StarChem	access:private
StarChem::initial_elements	./include/starchem.h	/^    std::vector<std::string>      initial_elements;$/;"	m	class:StarChem	access:private
StarChem::load_environment_data	./include/starchem.h	/^    void load_environment_data();$/;"	p	class:StarChem	access:public	signature:()
StarChem::load_environment_data	./src/starchem.cpp	/^StarChem::load_environment_data()$/;"	f	class:StarChem	signature:()
StarChem::load_initial_abundances	./include/starchem.h	/^    void load_initial_abundances();$/;"	p	class:StarChem	access:public	signature:()
StarChem::load_initial_abundances	./src/starchem.cpp	/^StarChem::load_initial_abundances()$/;"	f	class:StarChem	signature:()
StarChem::load_network	./include/starchem.h	/^    void load_network();$/;"	p	class:StarChem	access:public	signature:()
StarChem::load_network	./src/starchem.cpp	/^StarChem::load_network()$/;"	f	class:StarChem	signature:()
StarChem::net	./include/starchem.h	/^    network                       net;$/;"	m	class:StarChem	access:private
StarChem::run	./include/starchem.h	/^    void run();$/;"	p	class:StarChem	access:public	signature:()
StarChem::run	./src/starchem.cpp	/^StarChem::run()$/;"	f	class:StarChem	signature:()
StarChem::sc_config	./include/starchem.h	/^    configuration                 sc_config;$/;"	m	class:StarChem	access:private
StarChem::set_following	./include/starchem.h	/^    void set_following ( const spec_v &following_list )$/;"	f	class:StarChem	access:public	signature:( const spec_v &following_list )
StarChem::~StarChem	./include/starchem.h	/^    virtual ~StarChem() {}$/;"	f	class:StarChem	access:public	signature:()
TK_SPLINE_H	./include/spline.h	28;"	d
a2d	./include/interp2D.h	/^    axes2D a2d;$/;"	m	class:netcdf_reader	access:private
abundance_file	./include/configuration.h	/^    std::string abundance_file;$/;"	m	struct:configuration	access:public
abundance_v	./include/cell.h	/^typedef std::vector<double> abundance_v;$/;"	t
alpha	./include/reaction.h	/^    double alpha;$/;"	m	struct:reaction	access:public
axes	./include/interp2D.h	/^    axes2D                  axes;$/;"	m	class:interp2D	access:public
axes2D	./include/interp2D.h	/^typedef std::array<axis, 2>           axes2D;$/;"	t
axis	./include/interp2D.h	/^struct axis$/;"	s
axis::dx	./include/interp2D.h	/^    double   dx;$/;"	m	struct:axis	access:public
axis::nx	./include/interp2D.h	/^    uint32_t nx;$/;"	m	struct:axis	access:public
axis::reset	./include/interp2D.h	/^    void reset()$/;"	f	struct:axis	access:public	signature:()
axis::x	./include/interp2D.h	/^    std::vector<double> x;$/;"	m	struct:axis	access:public
band_matrix	./include/spline.h	/^    band_matrix ( int dim, int n_u, int n_l );    \/\/ constructor$/;"	p	class:tk::band_matrix	access:public	signature:( int dim, int n_u, int n_l )
band_matrix	./include/spline.h	/^    band_matrix() {};                             \/\/ constructor$/;"	f	class:tk::band_matrix	access:public	signature:()
band_matrix	./include/spline.h	/^class band_matrix$/;"	c	namespace:tk
band_matrix	./src/spline.cpp	/^band_matrix::band_matrix ( int dim, int n_u, int n_l )$/;"	f	class:tk::band_matrix	signature:( int dim, int n_u, int n_l )
bd_type	./include/spline.h	/^    enum bd_type$/;"	g	class:tk::spline	access:public
beta	./include/reaction.h	/^    double beta;$/;"	m	struct:reaction	access:public
calc_state_vars	./include/cell.h	/^    void calc_state_vars ( const abundance_v &x, const double time );$/;"	p	class:cell	access:private	signature:( const abundance_v &x, const double time )
calc_state_vars	./src/cell.cpp	/^void cell::calc_state_vars ( const abundance_v &x, const double time )$/;"	f	class:cell	signature:( const abundance_v &x, const double time )
cell	./include/cell.h	/^    cell ( network *n, uint32_t id, const spec_v &init_s, const cell_input &input_data );$/;"	p	class:cell	access:public	signature:( network *n, uint32_t id, const spec_v &init_s, const cell_input &input_data )
cell	./include/cell.h	/^class cell$/;"	c
cell	./src/cell.cpp	/^cell::cell ( network *n, uint32_t id, const spec_v &init_s,$/;"	f	class:cell	signature:( network *n, uint32_t id, const spec_v &init_s, const cell_input &input_data )
cell::calc_state_vars	./include/cell.h	/^    void calc_state_vars ( const abundance_v &x, const double time );$/;"	p	class:cell	access:private	signature:( const abundance_v &x, const double time )
cell::calc_state_vars	./src/cell.cpp	/^void cell::calc_state_vars ( const abundance_v &x, const double time )$/;"	f	class:cell	signature:( const abundance_v &x, const double time )
cell::cell	./include/cell.h	/^    cell ( network *n, uint32_t id, const spec_v &init_s, const cell_input &input_data );$/;"	p	class:cell	access:public	signature:( network *n, uint32_t id, const spec_v &init_s, const cell_input &input_data )
cell::cell	./src/cell.cpp	/^cell::cell ( network *n, uint32_t id, const spec_v &init_s,$/;"	f	class:cell	signature:( network *n, uint32_t id, const spec_v &init_s, const cell_input &input_data )
cell::cid	./include/cell.h	/^    uint32_t cid;$/;"	m	class:cell	access:private
cell::current_abundances	./include/cell.h	/^    abundance_v current_abundances;$/;"	m	class:cell	access:private
cell::env_temperature_spline	./include/cell.h	/^    tk::spline env_temperature_spline;$/;"	m	class:cell	access:private
cell::env_temperatures	./include/cell.h	/^    std::vector<double> env_temperatures;$/;"	m	class:cell	access:private
cell::env_times	./include/cell.h	/^    std::vector<double> env_times;$/;"	m	class:cell	access:private
cell::env_volume_spline	./include/cell.h	/^    tk::spline env_volume_spline;$/;"	m	class:cell	access:private
cell::env_volumes	./include/cell.h	/^    std::vector<double> env_volumes;$/;"	m	class:cell	access:private
cell::get_id	./include/cell.h	/^    int get_id()$/;"	f	class:cell	access:public	signature:()
cell::initial_abundances	./include/cell.h	/^    abundance_v initial_abundances;$/;"	m	class:cell	access:private
cell::net	./include/cell.h	/^    network *net;$/;"	m	class:cell	access:private
cell::operator ()	./include/cell.h	/^    void operator() ( const abundance_v &x, abundance_v &dxdt, const double t );$/;"	p	class:cell	access:public	signature:( const abundance_v &x, abundance_v &dxdt, const double t )
cell::operator ()	./src/cell.cpp	/^void cell::operator() ( const abundance_v &x, abundance_v &dxdt, const double t )$/;"	f	class:cell	signature:( const abundance_v &x, abundance_v &dxdt, const double t )
cell::set_env_data	./include/cell.h	/^    void set_env_data ( const cell_input &input_data );$/;"	p	class:cell	access:private	signature:( const cell_input &input_data )
cell::set_env_data	./src/cell.cpp	/^cell::set_env_data ( const cell_input &input_data )$/;"	f	class:cell	signature:( const cell_input &input_data )
cell::set_init_abundances	./include/cell.h	/^    void set_init_abundances ( const spec_v &init_s, const cell_input &init_data );$/;"	p	class:cell	access:private	signature:( const spec_v &init_s, const cell_input &init_data )
cell::set_init_abundances	./src/cell.cpp	/^cell::set_init_abundances ( const spec_v &init_s, const cell_input &init_data )$/;"	f	class:cell	signature:( const spec_v &init_s, const cell_input &init_data )
cell::solution_abundances	./include/cell.h	/^    std::vector<abundance_v> solution_abundances;$/;"	m	class:cell	access:private
cell::solution_times	./include/cell.h	/^    std::vector<double> solution_times;$/;"	m	class:cell	access:private
cell::solution_vars	./include/cell.h	/^    std::vector<cell_state> solution_vars;$/;"	m	class:cell	access:private
cell::solve	./include/cell.h	/^    void solve ( const configuration &c , const spec_v& foll );$/;"	p	class:cell	access:public	signature:( const configuration &c , const spec_v& foll )
cell::solve	./src/cell.cpp	/^cell::solve ( const configuration &config, const spec_v& foll )$/;"	f	class:cell	signature:( const configuration &config, const spec_v& foll )
cell::state_vars	./include/cell.h	/^    cell_state state_vars;$/;"	m	class:cell	access:private
cell::~cell	./include/cell.h	/^    virtual ~cell() { };$/;"	f	class:cell	access:public	signature:()
cell_input	./include/cell.h	/^struct cell_input$/;"	s
cell_input::initial_abundances	./include/cell.h	/^    std::vector<double> initial_abundances;$/;"	m	struct:cell_input	access:public
cell_input::inp_temperatures	./include/cell.h	/^    std::vector<double> inp_temperatures;$/;"	m	struct:cell_input	access:public
cell_input::inp_times	./include/cell.h	/^    std::vector<double> inp_times;$/;"	m	struct:cell_input	access:public
cell_input::inp_volumes	./include/cell.h	/^    std::vector<double> inp_volumes;$/;"	m	struct:cell_input	access:public
cell_inputs	./include/starchem.h	/^    std::map<uint32_t, cell_input> cell_inputs;$/;"	m	class:StarChem	access:private
cell_partial	./include/cell.h	/^struct cell_partial$/;"	s
cell_partial::critical_size	./include/cell.h	/^    double critical_size;$/;"	m	struct:cell_partial	access:public
cell_partial::equilibrium_pressure	./include/cell.h	/^    double equilibrium_pressure;$/;"	m	struct:cell_partial	access:public
cell_partial::grains_nucleating	./include/cell.h	/^    double grains_nucleating;$/;"	m	struct:cell_partial	access:public
cell_partial::is_nucleating	./include/cell.h	/^    bool  is_nucleating;$/;"	m	struct:cell_partial	access:public
cell_partial::log_nucleation_rate	./include/cell.h	/^    double log_nucleation_rate;$/;"	m	struct:cell_partial	access:public
cell_partial::nucleation_rate	./include/cell.h	/^    double nucleation_rate;$/;"	m	struct:cell_partial	access:public
cell_partial::pressure	./include/cell.h	/^    double pressure;$/;"	m	struct:cell_partial	access:public
cell_partial::reaction_idx	./include/cell.h	/^    double reaction_idx;$/;"	m	struct:cell_partial	access:public
cell_partial::saturation	./include/cell.h	/^    double saturation;$/;"	m	struct:cell_partial	access:public
cell_state	./include/cell.h	/^struct cell_state$/;"	s
cell_state::drho	./include/cell.h	/^    double drho;$/;"	m	struct:cell_state	access:public
cell_state::dvolume	./include/cell.h	/^    double dvolume;$/;"	m	struct:cell_state	access:public
cell_state::parts	./include/cell.h	/^    std::vector<cell_partial> parts;$/;"	m	struct:cell_state	access:public
cell_state::temperature	./include/cell.h	/^    double temperature;$/;"	m	struct:cell_state	access:public
cell_state::volume	./include/cell.h	/^    double volume;$/;"	m	struct:cell_state	access:public
cells	./include/starchem.h	/^    std::vector<cell>             cells;$/;"	m	class:StarChem	access:private
check_point	./include/interp2D.h	/^    bool   check_point ( double xval, double yval );$/;"	p	class:interp2D	access:public	signature:( double xval, double yval )
check_point	./src/interp2D.cpp	/^interp2D::check_point ( double xval, double yval )$/;"	f	class:interp2D	signature:( double xval, double yval )
chemical_reactions_idx	./include/network.h	/^    std::vector<size_t> chemical_reactions_idx;$/;"	m	struct:network	access:public
cid	./include/cell.h	/^    uint32_t cid;$/;"	m	class:cell	access:private
cleanup	./include/starchem.h	/^    void cleanup() {}$/;"	f	class:StarChem	access:public	signature:()
configuration	./include/configuration.h	/^    configuration();$/;"	p	struct:configuration	access:public	signature:()
configuration	./include/configuration.h	/^struct configuration$/;"	s
configuration	./src/configuration.cpp	/^configuration::configuration() : desc ( "configuration" )$/;"	f	class:configuration	signature:()
configuration::abundance_file	./include/configuration.h	/^    std::string abundance_file;$/;"	m	struct:configuration	access:public
configuration::configuration	./include/configuration.h	/^    configuration();$/;"	p	struct:configuration	access:public	signature:()
configuration::configuration	./src/configuration.cpp	/^configuration::configuration() : desc ( "configuration" )$/;"	f	class:configuration	signature:()
configuration::desc	./include/configuration.h	/^    options::options_description  desc;$/;"	m	struct:configuration	access:public
configuration::environment_file	./include/configuration.h	/^    std::string environment_file;$/;"	m	struct:configuration	access:public
configuration::io_disk_n_steps	./include/configuration.h	/^    int io_disk_n_steps;$/;"	m	struct:configuration	access:public
configuration::io_screen_n_steps	./include/configuration.h	/^    int io_screen_n_steps;$/;"	m	struct:configuration	access:public
configuration::network_file	./include/configuration.h	/^    std::string network_file;$/;"	m	struct:configuration	access:public
configuration::ode_abs_err	./include/configuration.h	/^    double ode_abs_err;$/;"	m	struct:configuration	access:public
configuration::ode_dt_0	./include/configuration.h	/^    double ode_dt_0;$/;"	m	struct:configuration	access:public
configuration::ode_rel_err	./include/configuration.h	/^    double ode_rel_err;$/;"	m	struct:configuration	access:public
configuration::ode_time_0	./include/configuration.h	/^    double ode_time_0;$/;"	m	struct:configuration	access:public
configuration::ode_time_n	./include/configuration.h	/^    double ode_time_n;$/;"	m	struct:configuration	access:public
configuration::read_config	./include/configuration.h	/^    void read_config ( const std::string &filename );$/;"	p	struct:configuration	access:public	signature:( const std::string &filename )
configuration::read_config	./src/configuration.cpp	/^configuration::read_config ( const std::string &config_filename )$/;"	f	class:configuration	signature:( const std::string &config_filename )
configuration::temperature_0	./include/configuration.h	/^    double temperature_0;$/;"	m	struct:configuration	access:public
configuration::vm	./include/configuration.h	/^    options::variables_map        vm;$/;"	m	struct:configuration	access:public
constants	./include/constants.h	/^namespace constants$/;"	n
constants::equPres	./include/constants.h	/^double equPres ( const double A, const double B, const double T )$/;"	f	namespace:constants	signature:( const double A, const double B, const double T )
constants::kBeta	./include/constants.h	/^double kBeta ( const double T )$/;"	f	namespace:constants	signature:( const double T )
constants::kBoltzmann	./include/constants.h	/^const double kBoltzmann = 1.38064852E-16;$/;"	m	namespace:constants
constants::pressure_0	./include/constants.h	/^const double pressure_0 = 1.0E6;$/;"	m	namespace:constants
constants::shapeFactor	./include/constants.h	/^const double shapeFactor = pow ( 36.0 * M_PI, 1. \/ 3. );$/;"	m	namespace:constants
create_simulation_cells	./include/starchem.h	/^    void create_simulation_cells();$/;"	p	class:StarChem	access:public	signature:()
create_simulation_cells	./src/starchem.cpp	/^StarChem::create_simulation_cells()$/;"	f	class:StarChem	signature:()
critical_size	./include/cell.h	/^    double critical_size;$/;"	m	struct:cell_partial	access:public
current_abundances	./include/cell.h	/^    abundance_v current_abundances;$/;"	m	class:cell	access:private
d2d	./include/interp2D.h	/^    std::vector<data2D> d2d;$/;"	m	class:netcdf_reader	access:private
data	./include/interp2D.h	/^    std::vector<data2D>     data;$/;"	m	class:interp2D	access:public
data2D	./include/interp2D.h	/^typedef boost::multi_array<double, 2> data2D;$/;"	t
desc	./include/configuration.h	/^    options::options_description  desc;$/;"	m	struct:configuration	access:public
dim	./include/spline.h	/^    int dim() const;                             \/\/ matrix dimension$/;"	p	class:tk::band_matrix	access:public	signature:() const
dim	./src/spline.cpp	/^int band_matrix::dim() const$/;"	f	class:tk::band_matrix	signature:() const
drho	./include/cell.h	/^    double drho;$/;"	m	struct:cell_state	access:public
dump_abundances	./include/cellobserver.h	/^    void dump_abundances();$/;"	p	class:CellObserver	access:public	signature:()
dump_abundances	./src/cellobserver.cpp	/^void CellObserver::dump_abundances ( )$/;"	f	class:CellObserver	signature:( )
dvolume	./include/cell.h	/^    double dvolume;$/;"	m	struct:cell_state	access:public
dx	./include/interp2D.h	/^    double   dx;$/;"	m	struct:axis	access:public
env_temperature_spline	./include/cell.h	/^    tk::spline env_temperature_spline;$/;"	m	class:cell	access:private
env_temperatures	./include/cell.h	/^    std::vector<double> env_temperatures;$/;"	m	class:cell	access:private
env_times	./include/cell.h	/^    std::vector<double> env_times;$/;"	m	class:cell	access:private
env_volume_spline	./include/cell.h	/^    tk::spline env_volume_spline;$/;"	m	class:cell	access:private
env_volumes	./include/cell.h	/^    std::vector<double> env_volumes;$/;"	m	class:cell	access:private
environment_file	./include/configuration.h	/^    std::string environment_file;$/;"	m	struct:configuration	access:public
equPres	./include/constants.h	/^double equPres ( const double A, const double B, const double T )$/;"	f	namespace:constants	signature:( const double A, const double B, const double T )
equilibrium_pressure	./include/cell.h	/^    double equilibrium_pressure;$/;"	m	struct:cell_partial	access:public
extra	./include/reaction.h	/^    std::string extra;$/;"	m	struct:reaction	access:public
extra_rule	./include/network.h	/^    qi::rule<Iterator, std::string(), Skipper> extra_rule;$/;"	m	struct:network_parser	access:public
first_deriv	./include/spline.h	/^        first_deriv = 1,$/;"	e	enum:tk::spline::bd_type
following	./include/cellobserver.h	/^    std::vector<std::string> following;$/;"	m	class:CellObserver	access:private
following_idx	./include/cellobserver.h	/^    std::vector<int> following_idx;$/;"	m	class:CellObserver	access:private
following_species	./include/starchem.h	/^    std::vector<std::string>      following_species;$/;"	m	class:StarChem	access:private
gamma	./include/reaction.h	/^    double gamma;$/;"	m	struct:reaction	access:public
get_data	./include/interp2D.h	/^    std::vector<data2D>     get_data();$/;"	p	class:netcdf_reader	access:public	signature:()
get_data	./src/interp2D.cpp	/^netcdf_reader::get_data()$/;"	f	class:netcdf_reader	signature:()
get_dims	./include/interp2D.h	/^    axes2D                  get_dims();$/;"	p	class:netcdf_reader	access:public	signature:()
get_dims	./src/interp2D.cpp	/^netcdf_reader::get_dims()$/;"	f	class:netcdf_reader	signature:()
get_id	./include/cell.h	/^    int get_id()$/;"	f	class:cell	access:public	signature:()
get_species_index	./include/network.h	/^    size_t get_species_index ( const std::string &spec );$/;"	p	struct:network	access:public	signature:( const std::string &spec )
get_species_index	./src/network.cpp	/^network::get_species_index ( const std::string &spec )$/;"	f	class:network	signature:( const std::string &spec )
get_species_list	./include/network.h	/^    void get_species_list();$/;"	p	struct:network	access:public	signature:()
get_species_list	./src/network.cpp	/^network::get_species_list()$/;"	f	class:network	signature:()
grains_nucleating	./include/cell.h	/^    double grains_nucleating;$/;"	m	struct:cell_partial	access:public
id	./include/reaction.h	/^    int id;$/;"	m	struct:reaction	access:public
initial_abundances	./include/cell.h	/^    abundance_v initial_abundances;$/;"	m	class:cell	access:private
initial_abundances	./include/cell.h	/^    std::vector<double> initial_abundances;$/;"	m	struct:cell_input	access:public
initial_elements	./include/starchem.h	/^    std::vector<std::string>      initial_elements;$/;"	m	class:StarChem	access:private
inp_temperatures	./include/cell.h	/^    std::vector<double> inp_temperatures;$/;"	m	struct:cell_input	access:public
inp_times	./include/cell.h	/^    std::vector<double> inp_times;$/;"	m	struct:cell_input	access:public
inp_volumes	./include/cell.h	/^    std::vector<double> inp_volumes;$/;"	m	struct:cell_input	access:public
interp2D	./include/interp2D.h	/^    interp2D ( const axes2D &input_axis, const std::vector<data2D> &input_data );$/;"	p	class:interp2D	access:public	signature:( const axes2D &input_axis, const std::vector<data2D> &input_data )
interp2D	./include/interp2D.h	/^    interp2D ( const std::string &ncdf_file );$/;"	p	class:interp2D	access:public	signature:( const std::string &ncdf_file )
interp2D	./include/interp2D.h	/^    interp2D() {};$/;"	f	class:interp2D	access:public	signature:()
interp2D	./include/interp2D.h	/^class interp2D$/;"	c
interp2D	./src/interp2D.cpp	/^interp2D::interp2D ( const axes2D &input_axis, const std::vector<data2D> &input_data )$/;"	f	class:interp2D	signature:( const axes2D &input_axis, const std::vector<data2D> &input_data )
interp2D	./src/interp2D.cpp	/^interp2D::interp2D ( const std::string &ncdf_file )$/;"	f	class:interp2D	signature:( const std::string &ncdf_file )
interp2D::axes	./include/interp2D.h	/^    axes2D                  axes;$/;"	m	class:interp2D	access:public
interp2D::check_point	./include/interp2D.h	/^    bool   check_point ( double xval, double yval );$/;"	p	class:interp2D	access:public	signature:( double xval, double yval )
interp2D::check_point	./src/interp2D.cpp	/^interp2D::check_point ( double xval, double yval )$/;"	f	class:interp2D	signature:( double xval, double yval )
interp2D::data	./include/interp2D.h	/^    std::vector<data2D>     data;$/;"	m	class:interp2D	access:public
interp2D::interp2D	./include/interp2D.h	/^    interp2D ( const axes2D &input_axis, const std::vector<data2D> &input_data );$/;"	p	class:interp2D	access:public	signature:( const axes2D &input_axis, const std::vector<data2D> &input_data )
interp2D::interp2D	./include/interp2D.h	/^    interp2D ( const std::string &ncdf_file );$/;"	p	class:interp2D	access:public	signature:( const std::string &ncdf_file )
interp2D::interp2D	./include/interp2D.h	/^    interp2D() {};$/;"	f	class:interp2D	access:public	signature:()
interp2D::interp2D	./src/interp2D.cpp	/^interp2D::interp2D ( const axes2D &input_axis, const std::vector<data2D> &input_data )$/;"	f	class:interp2D	signature:( const axes2D &input_axis, const std::vector<data2D> &input_data )
interp2D::interp2D	./src/interp2D.cpp	/^interp2D::interp2D ( const std::string &ncdf_file )$/;"	f	class:interp2D	signature:( const std::string &ncdf_file )
interp2D::interpolate	./include/interp2D.h	/^    double interpolate ( int col_id, double xval, double yval );$/;"	p	class:interp2D	access:public	signature:( int col_id, double xval, double yval )
interp2D::interpolate	./src/interp2D.cpp	/^interp2D::interpolate ( int col_id, double xval, double yval )$/;"	f	class:interp2D	signature:( int col_id, double xval, double yval )
interp2D::load_from_netcdf	./include/interp2D.h	/^    void load_from_netcdf ( const std::string &nc_file );$/;"	p	class:interp2D	access:public	signature:( const std::string &nc_file )
interp2D::load_from_netcdf	./src/interp2D.cpp	/^interp2D::load_from_netcdf ( const std::string &nc_file )$/;"	f	class:interp2D	signature:( const std::string &nc_file )
interp2D::set_data	./include/interp2D.h	/^    void set_data ( const axes2D &input_axis, const std::vector<data2D> &input_data );$/;"	p	class:interp2D	access:public	signature:( const axes2D &input_axis, const std::vector<data2D> &input_data )
interp2D::set_data	./src/interp2D.cpp	/^interp2D::set_data ( const axes2D &input_axis, const std::vector<data2D> &input_data )$/;"	f	class:interp2D	signature:( const axes2D &input_axis, const std::vector<data2D> &input_data )
interp2D::~interp2D	./include/interp2D.h	/^    virtual ~interp2D() {}$/;"	f	class:interp2D	access:public	signature:()
interpolate	./include/interp2D.h	/^    double interpolate ( int col_id, double xval, double yval );$/;"	p	class:interp2D	access:public	signature:( int col_id, double xval, double yval )
interpolate	./src/interp2D.cpp	/^interp2D::interpolate ( int col_id, double xval, double yval )$/;"	f	class:interp2D	signature:( int col_id, double xval, double yval )
io_disk_n_steps	./include/configuration.h	/^    int io_disk_n_steps;$/;"	m	struct:configuration	access:public
io_screen_n_steps	./include/configuration.h	/^    int io_screen_n_steps;$/;"	m	struct:configuration	access:public
is_nucleating	./include/cell.h	/^    bool  is_nucleating;$/;"	m	struct:cell_partial	access:public
kBeta	./include/constants.h	/^double kBeta ( const double T )$/;"	f	namespace:constants	signature:( const double T )
kBoltzmann	./include/constants.h	/^const double kBoltzmann = 1.38064852E-16;$/;"	m	namespace:constants
l_solve	./include/spline.h	/^    std::vector<double> l_solve ( const std::vector<double> &b ) const;$/;"	p	class:tk::band_matrix	access:public	signature:( const std::vector<double> &b ) const
l_solve	./src/spline.cpp	/^std::vector<double> band_matrix::l_solve ( const std::vector<double> &b ) const$/;"	f	class:tk::band_matrix	signature:( const std::vector<double> &b ) const
load	./include/interp2D.h	/^    void                    load();$/;"	p	class:netcdf_reader	access:public	signature:()
load_data	./include/interp2D.h	/^    void                    load_data();$/;"	p	class:netcdf_reader	access:private	signature:()
load_data	./src/interp2D.cpp	/^netcdf_reader::load_data()$/;"	f	class:netcdf_reader	signature:()
load_dims	./include/interp2D.h	/^    void                    load_dims();$/;"	p	class:netcdf_reader	access:private	signature:()
load_dims	./src/interp2D.cpp	/^netcdf_reader::load_dims()$/;"	f	class:netcdf_reader	signature:()
load_environment_data	./include/starchem.h	/^    void load_environment_data();$/;"	p	class:StarChem	access:public	signature:()
load_environment_data	./src/starchem.cpp	/^StarChem::load_environment_data()$/;"	f	class:StarChem	signature:()
load_from_netcdf	./include/interp2D.h	/^    void load_from_netcdf ( const std::string &nc_file );$/;"	p	class:interp2D	access:public	signature:( const std::string &nc_file )
load_from_netcdf	./src/interp2D.cpp	/^interp2D::load_from_netcdf ( const std::string &nc_file )$/;"	f	class:interp2D	signature:( const std::string &nc_file )
load_initial_abundances	./include/starchem.h	/^    void load_initial_abundances();$/;"	p	class:StarChem	access:public	signature:()
load_initial_abundances	./src/starchem.cpp	/^StarChem::load_initial_abundances()$/;"	f	class:StarChem	signature:()
load_network	./include/starchem.h	/^    void load_network();$/;"	p	class:StarChem	access:public	signature:()
load_network	./src/starchem.cpp	/^StarChem::load_network()$/;"	f	class:StarChem	signature:()
log_nucleation_rate	./include/cell.h	/^    double log_nucleation_rate;$/;"	m	struct:cell_partial	access:public
lu_decompose	./include/spline.h	/^    void lu_decompose();$/;"	p	class:tk::band_matrix	access:public	signature:()
lu_decompose	./src/spline.cpp	/^void band_matrix::lu_decompose()$/;"	f	class:tk::band_matrix	signature:()
lu_solve	./include/spline.h	/^    std::vector<double> lu_solve ( const std::vector<double> &b,$/;"	p	class:tk::band_matrix	access:public	signature:( const std::vector<double> &b, bool is_lu_decomposed = false )
lu_solve	./src/spline.cpp	/^std::vector<double> band_matrix::lu_solve ( const std::vector<double> &b,$/;"	f	class:tk::band_matrix	signature:( const std::vector<double> &b, bool is_lu_decomposed )
m_a	./include/spline.h	/^    std::vector<double> m_a, m_b, m_c;      \/\/ spline coefficients$/;"	m	class:tk::spline	access:private
m_b	./include/spline.h	/^    std::vector<double> m_a, m_b, m_c;      \/\/ spline coefficients$/;"	m	class:tk::spline	access:private
m_b0	./include/spline.h	/^    double  m_b0, m_c0;                     \/\/ for left extrapol$/;"	m	class:tk::spline	access:private
m_c	./include/spline.h	/^    std::vector<double> m_a, m_b, m_c;      \/\/ spline coefficients$/;"	m	class:tk::spline	access:private
m_c0	./include/spline.h	/^    double  m_b0, m_c0;                     \/\/ for left extrapol$/;"	m	class:tk::spline	access:private
m_force_linear_extrapolation	./include/spline.h	/^    bool    m_force_linear_extrapolation;$/;"	m	class:tk::spline	access:private
m_left	./include/spline.h	/^    bd_type m_left, m_right;$/;"	m	class:tk::spline	access:private
m_left_value	./include/spline.h	/^    double  m_left_value, m_right_value;$/;"	m	class:tk::spline	access:private
m_lower	./include/spline.h	/^    std::vector< std::vector<double> > m_lower;  \/\/ lower band$/;"	m	class:tk::band_matrix	access:private
m_ndump	./include/cellobserver.h	/^    uint32_t m_nstore, m_ndump;$/;"	m	class:CellObserver	access:private
m_nstore	./include/cellobserver.h	/^    uint32_t m_nstore, m_ndump;$/;"	m	class:CellObserver	access:private
m_right	./include/spline.h	/^    bd_type m_left, m_right;$/;"	m	class:tk::spline	access:private
m_right_value	./include/spline.h	/^    double  m_left_value, m_right_value;$/;"	m	class:tk::spline	access:private
m_states	./include/cellobserver.h	/^    std::vector<abundance_v> &m_states;$/;"	m	class:CellObserver	access:private
m_times	./include/cellobserver.h	/^    std::vector<double> &m_times;$/;"	m	class:CellObserver	access:private
m_upper	./include/spline.h	/^    std::vector< std::vector<double> > m_upper;  \/\/ upper band$/;"	m	class:tk::band_matrix	access:private
m_vars	./include/cellobserver.h	/^    std::vector<cell_state> &m_vars;$/;"	m	class:CellObserver	access:private
m_x	./include/spline.h	/^    std::vector<double> m_x, m_y;           \/\/ x,y coordinates of points$/;"	m	class:tk::spline	access:private
m_y	./include/spline.h	/^    std::vector<double> m_x, m_y;           \/\/ x,y coordinates of points$/;"	m	class:tk::spline	access:private
main	./src/main.cpp	/^int main ( int argc, char *argv[] )$/;"	f	signature:( int argc, char *argv[] )
map_species_to_reactions	./include/network.h	/^    void map_species_to_reactions();$/;"	p	struct:network	access:public	signature:()
map_species_to_reactions	./src/network.cpp	/^network::map_species_to_reactions()$/;"	f	class:network	signature:()
n_called	./include/cellobserver.h	/^    uint32_t n_called;$/;"	m	class:CellObserver	access:private
n_chemical_reactions	./include/network.h	/^    int n_chemical_reactions;$/;"	m	struct:network	access:public
n_nucleation_reactions	./include/network.h	/^    int n_nucleation_reactions;$/;"	m	struct:network	access:public
n_reactions	./include/network.h	/^    int n_reactions;$/;"	m	struct:network	access:public
n_species	./include/network.h	/^    int n_species;$/;"	m	struct:network	access:public
ncdf_dims	./include/interp2D.h	/^    std::vector<std::string> ncdf_dims, ncdf_vars;$/;"	m	class:netcdf_reader	access:private
ncdf_file	./include/interp2D.h	/^    NcFile ncdf_file;$/;"	m	class:netcdf_reader	access:private
ncdf_vars	./include/interp2D.h	/^    std::vector<std::string> ncdf_dims, ncdf_vars;$/;"	m	class:netcdf_reader	access:private
net	./include/cell.h	/^    network *net;$/;"	m	class:cell	access:private
net	./include/starchem.h	/^    network                       net;$/;"	m	class:StarChem	access:private
netcdf_reader	./include/interp2D.h	/^    netcdf_reader ( const std::string &nc_file,$/;"	p	class:netcdf_reader	access:public	signature:( const std::string &nc_file, const std::vector<std::string> &dims, const std::vector<std::string> &vars )
netcdf_reader	./include/interp2D.h	/^class netcdf_reader$/;"	c
netcdf_reader	./src/interp2D.cpp	/^netcdf_reader::netcdf_reader ( const std::string &nc_file,$/;"	f	class:netcdf_reader	signature:( const std::string &nc_file, const std::vector<std::string> &dims, const std::vector<std::string> &vars )
netcdf_reader::a2d	./include/interp2D.h	/^    axes2D a2d;$/;"	m	class:netcdf_reader	access:private
netcdf_reader::d2d	./include/interp2D.h	/^    std::vector<data2D> d2d;$/;"	m	class:netcdf_reader	access:private
netcdf_reader::get_data	./include/interp2D.h	/^    std::vector<data2D>     get_data();$/;"	p	class:netcdf_reader	access:public	signature:()
netcdf_reader::get_data	./src/interp2D.cpp	/^netcdf_reader::get_data()$/;"	f	class:netcdf_reader	signature:()
netcdf_reader::get_dims	./include/interp2D.h	/^    axes2D                  get_dims();$/;"	p	class:netcdf_reader	access:public	signature:()
netcdf_reader::get_dims	./src/interp2D.cpp	/^netcdf_reader::get_dims()$/;"	f	class:netcdf_reader	signature:()
netcdf_reader::load	./include/interp2D.h	/^    void                    load();$/;"	p	class:netcdf_reader	access:public	signature:()
netcdf_reader::load_data	./include/interp2D.h	/^    void                    load_data();$/;"	p	class:netcdf_reader	access:private	signature:()
netcdf_reader::load_data	./src/interp2D.cpp	/^netcdf_reader::load_data()$/;"	f	class:netcdf_reader	signature:()
netcdf_reader::load_dims	./include/interp2D.h	/^    void                    load_dims();$/;"	p	class:netcdf_reader	access:private	signature:()
netcdf_reader::load_dims	./src/interp2D.cpp	/^netcdf_reader::load_dims()$/;"	f	class:netcdf_reader	signature:()
netcdf_reader::ncdf_dims	./include/interp2D.h	/^    std::vector<std::string> ncdf_dims, ncdf_vars;$/;"	m	class:netcdf_reader	access:private
netcdf_reader::ncdf_file	./include/interp2D.h	/^    NcFile ncdf_file;$/;"	m	class:netcdf_reader	access:private
netcdf_reader::ncdf_vars	./include/interp2D.h	/^    std::vector<std::string> ncdf_dims, ncdf_vars;$/;"	m	class:netcdf_reader	access:private
netcdf_reader::netcdf_reader	./include/interp2D.h	/^    netcdf_reader ( const std::string &nc_file,$/;"	p	class:netcdf_reader	access:public	signature:( const std::string &nc_file, const std::vector<std::string> &dims, const std::vector<std::string> &vars )
netcdf_reader::netcdf_reader	./src/interp2D.cpp	/^netcdf_reader::netcdf_reader ( const std::string &nc_file,$/;"	f	class:netcdf_reader	signature:( const std::string &nc_file, const std::vector<std::string> &dims, const std::vector<std::string> &vars )
netcdf_reader::~netcdf_reader	./include/interp2D.h	/^    virtual ~netcdf_reader() {}$/;"	f	class:netcdf_reader	access:public	signature:()
network	./include/network.h	/^    network();$/;"	p	struct:network	access:public	signature:()
network	./include/network.h	/^struct network$/;"	s
network	./src/network.cpp	/^network::network() :$/;"	f	class:network	signature:()
network::chemical_reactions_idx	./include/network.h	/^    std::vector<size_t> chemical_reactions_idx;$/;"	m	struct:network	access:public
network::get_species_index	./include/network.h	/^    size_t get_species_index ( const std::string &spec );$/;"	p	struct:network	access:public	signature:( const std::string &spec )
network::get_species_index	./src/network.cpp	/^network::get_species_index ( const std::string &spec )$/;"	f	class:network	signature:( const std::string &spec )
network::get_species_list	./include/network.h	/^    void get_species_list();$/;"	p	struct:network	access:public	signature:()
network::get_species_list	./src/network.cpp	/^network::get_species_list()$/;"	f	class:network	signature:()
network::map_species_to_reactions	./include/network.h	/^    void map_species_to_reactions();$/;"	p	struct:network	access:public	signature:()
network::map_species_to_reactions	./src/network.cpp	/^network::map_species_to_reactions()$/;"	f	class:network	signature:()
network::n_chemical_reactions	./include/network.h	/^    int n_chemical_reactions;$/;"	m	struct:network	access:public
network::n_nucleation_reactions	./include/network.h	/^    int n_nucleation_reactions;$/;"	m	struct:network	access:public
network::n_reactions	./include/network.h	/^    int n_reactions;$/;"	m	struct:network	access:public
network::n_species	./include/network.h	/^    int n_species;$/;"	m	struct:network	access:public
network::network	./include/network.h	/^    network();$/;"	p	struct:network	access:public	signature:()
network::network	./src/network.cpp	/^network::network() :$/;"	f	class:network	signature:()
network::nucl_rate_data	./include/network.h	/^    std::map<int, interp2D> nucl_rate_data;$/;"	m	struct:network	access:public
network::nucleation_reactions_idx	./include/network.h	/^    std::vector<size_t> nucleation_reactions_idx;$/;"	m	struct:network	access:public
network::post_process	./include/network.h	/^    void post_process();$/;"	p	struct:network	access:public	signature:()
network::post_process	./src/network.cpp	/^network::post_process()$/;"	f	class:network	signature:()
network::products_idx	./include/network.h	/^    std::vector<std::vector<size_t>> products_idx;$/;"	m	struct:network	access:public
network::reactants_idx	./include/network.h	/^    std::vector<std::vector<size_t>> reactants_idx;$/;"	m	struct:network	access:public
network::reactions	./include/network.h	/^    std::vector<reaction> reactions;$/;"	m	struct:network	access:public
network::read_network	./include/network.h	/^    int read_network ( const std::string &chemfile );$/;"	p	struct:network	access:public	signature:( const std::string &chemfile )
network::read_network	./src/network.cpp	/^network::read_network ( const std::string &chemfile )$/;"	f	class:network	signature:( const std::string &chemfile )
network::species	./include/network.h	/^    std::vector<std::string> species;$/;"	m	struct:network	access:public
network::~network	./include/network.h	/^    virtual ~network();$/;"	p	struct:network	access:public	signature:()
network::~network	./src/network.cpp	/^network::~network()$/;"	f	class:network	signature:()
network_file	./include/configuration.h	/^    std::string network_file;$/;"	m	struct:configuration	access:public
network_parser	./include/network.h	/^    network_parser()$/;"	f	struct:network_parser	access:public	signature:()
network_parser	./include/network.h	/^struct network_parser : qi::grammar<Iterator, reaction_v(), Skipper>$/;"	s	inherits:qi::grammar
network_parser::extra_rule	./include/network.h	/^    qi::rule<Iterator, std::string(), Skipper> extra_rule;$/;"	m	struct:network_parser	access:public
network_parser::network_parser	./include/network.h	/^    network_parser()$/;"	f	struct:network_parser	access:public	signature:()
network_parser::network_rule	./include/network.h	/^    qi::rule<Iterator, reaction_v(), Skipper> network_rule;$/;"	m	struct:network_parser	access:public
network_parser::reaction_rule	./include/network.h	/^    qi::rule<Iterator, reaction(), Skipper> reaction_rule;$/;"	m	struct:network_parser	access:public
network_parser::spec_rule	./include/network.h	/^    qi::rule<Iterator, spec_v(), Skipper> spec_rule;$/;"	m	struct:network_parser	access:public
network_rule	./include/network.h	/^    qi::rule<Iterator, reaction_v(), Skipper> network_rule;$/;"	m	struct:network_parser	access:public
nucl_rate_data	./include/network.h	/^    std::map<int, interp2D> nucl_rate_data;$/;"	m	struct:network	access:public
nucleation_rate	./include/cell.h	/^    double nucleation_rate;$/;"	m	struct:cell_partial	access:public
nucleation_reactions_idx	./include/network.h	/^    std::vector<size_t> nucleation_reactions_idx;$/;"	m	struct:network	access:public
num_lower	./include/spline.h	/^    int num_lower() const$/;"	f	class:tk::band_matrix	access:public	signature:() const
num_upper	./include/spline.h	/^    int num_upper() const$/;"	f	class:tk::band_matrix	access:public	signature:() const
nx	./include/interp2D.h	/^    uint32_t nx;$/;"	m	struct:axis	access:public
ode_abs_err	./include/configuration.h	/^    double ode_abs_err;$/;"	m	struct:configuration	access:public
ode_dt_0	./include/configuration.h	/^    double ode_dt_0;$/;"	m	struct:configuration	access:public
ode_rel_err	./include/configuration.h	/^    double ode_rel_err;$/;"	m	struct:configuration	access:public
ode_time_0	./include/configuration.h	/^    double ode_time_0;$/;"	m	struct:configuration	access:public
ode_time_n	./include/configuration.h	/^    double ode_time_n;$/;"	m	struct:configuration	access:public
ofname	./include/cellobserver.h	/^    std::string   ofname;$/;"	m	class:CellObserver	access:private
ofs	./include/cellobserver.h	/^    std::ofstream ofs;$/;"	m	class:CellObserver	access:private
operator ()	./include/cell.h	/^    void operator() ( const abundance_v &x, abundance_v &dxdt, const double t );$/;"	p	class:cell	access:public	signature:( const abundance_v &x, abundance_v &dxdt, const double t )
operator ()	./include/cellobserver.h	/^    void operator() ( const abundance_v &x, const cell_state &s, const double t, const double dt );$/;"	p	class:CellObserver	access:public	signature:( const abundance_v &x, const cell_state &s, const double t, const double dt )
operator ()	./include/spline.h	/^    double   operator () ( int i, int j ) const;    \/\/ read$/;"	p	class:tk::band_matrix	access:public	signature:( int i, int j ) const
operator ()	./include/spline.h	/^    double &operator () ( int i, int j );           \/\/ write$/;"	p	class:tk::band_matrix	access:public	signature:( int i, int j )
operator ()	./include/spline.h	/^    double operator() ( double x ) const;$/;"	p	class:tk::spline	access:public	signature:( double x ) const
operator ()	./src/cell.cpp	/^void cell::operator() ( const abundance_v &x, abundance_v &dxdt, const double t )$/;"	f	class:cell	signature:( const abundance_v &x, abundance_v &dxdt, const double t )
operator ()	./src/cellobserver.cpp	/^void CellObserver::operator() ( const abundance_v &x, const cell_state &s, const double t, const double dt  )$/;"	f	class:CellObserver	signature:( const abundance_v &x, const cell_state &s, const double t, const double dt )
operator ()	./src/spline.cpp	/^double &band_matrix::operator () ( int i, int j )$/;"	f	class:tk::band_matrix	signature:( int i, int j )
operator ()	./src/spline.cpp	/^double band_matrix::operator () ( int i, int j ) const$/;"	f	class:tk::band_matrix	signature:( int i, int j ) const
operator ()	./src/spline.cpp	/^double spline::operator() ( double x ) const$/;"	f	class:tk::spline	signature:( double x ) const
parts	./include/cell.h	/^    std::vector<cell_partial> parts;$/;"	m	struct:cell_state	access:public
post_process	./include/network.h	/^    void post_process();$/;"	p	struct:network	access:public	signature:()
post_process	./src/network.cpp	/^network::post_process()$/;"	f	class:network	signature:()
pressure	./include/cell.h	/^    double pressure;$/;"	m	struct:cell_partial	access:public
pressure_0	./include/constants.h	/^const double pressure_0 = 1.0E6;$/;"	m	namespace:constants
prods	./include/reaction.h	/^    spec_v prods;$/;"	m	struct:reaction	access:public
products_idx	./include/network.h	/^    std::vector<std::vector<size_t>> products_idx;$/;"	m	struct:network	access:public
r_solve	./include/spline.h	/^    std::vector<double> r_solve ( const std::vector<double> &b ) const;$/;"	p	class:tk::band_matrix	access:public	signature:( const std::vector<double> &b ) const
r_solve	./src/spline.cpp	/^std::vector<double> band_matrix::r_solve ( const std::vector<double> &b ) const$/;"	f	class:tk::band_matrix	signature:( const std::vector<double> &b ) const
rate	./include/reaction.h	/^    double rate ( double tgas );$/;"	p	struct:reaction	access:public	signature:( double tgas )
rate	./src/reaction.cpp	/^reaction::rate ( double tgas )$/;"	f	class:reaction	signature:( double tgas )
reactants_idx	./include/network.h	/^    std::vector<std::vector<size_t>> reactants_idx;$/;"	m	struct:network	access:public
reaction	./include/reaction.h	/^    reaction() : id ( -1 ), type ( -1 ) {}$/;"	f	struct:reaction	access:public	signature:()
reaction	./include/reaction.h	/^struct reaction$/;"	s
reaction::alpha	./include/reaction.h	/^    double alpha;$/;"	m	struct:reaction	access:public
reaction::beta	./include/reaction.h	/^    double beta;$/;"	m	struct:reaction	access:public
reaction::extra	./include/reaction.h	/^    std::string extra;$/;"	m	struct:reaction	access:public
reaction::gamma	./include/reaction.h	/^    double gamma;$/;"	m	struct:reaction	access:public
reaction::id	./include/reaction.h	/^    int id;$/;"	m	struct:reaction	access:public
reaction::prods	./include/reaction.h	/^    spec_v prods;$/;"	m	struct:reaction	access:public
reaction::rate	./include/reaction.h	/^    double rate ( double tgas );$/;"	p	struct:reaction	access:public	signature:( double tgas )
reaction::rate	./src/reaction.cpp	/^reaction::rate ( double tgas )$/;"	f	class:reaction	signature:( double tgas )
reaction::reaction	./include/reaction.h	/^    reaction() : id ( -1 ), type ( -1 ) {}$/;"	f	struct:reaction	access:public	signature:()
reaction::reacts	./include/reaction.h	/^    spec_v reacts;$/;"	m	struct:reaction	access:public
reaction::type	./include/reaction.h	/^    int type;$/;"	m	struct:reaction	access:public
reaction::~reaction	./include/reaction.h	/^    ~reaction() {}$/;"	f	struct:reaction	access:public	signature:()
reaction_idx	./include/cell.h	/^    double reaction_idx;$/;"	m	struct:cell_partial	access:public
reaction_rule	./include/network.h	/^    qi::rule<Iterator, reaction(), Skipper> reaction_rule;$/;"	m	struct:network_parser	access:public
reaction_v	./include/network.h	/^typedef std::vector<reaction> reaction_v;$/;"	t
reactions	./include/network.h	/^    std::vector<reaction> reactions;$/;"	m	struct:network	access:public
reacts	./include/reaction.h	/^    spec_v reacts;$/;"	m	struct:reaction	access:public
read_config	./include/configuration.h	/^    void read_config ( const std::string &filename );$/;"	p	struct:configuration	access:public	signature:( const std::string &filename )
read_config	./src/configuration.cpp	/^configuration::read_config ( const std::string &config_filename )$/;"	f	class:configuration	signature:( const std::string &config_filename )
read_network	./include/network.h	/^    int read_network ( const std::string &chemfile );$/;"	p	struct:network	access:public	signature:( const std::string &chemfile )
read_network	./src/network.cpp	/^network::read_network ( const std::string &chemfile )$/;"	f	class:network	signature:( const std::string &chemfile )
reset	./include/interp2D.h	/^    void reset()$/;"	f	struct:axis	access:public	signature:()
resize	./include/spline.h	/^    void resize ( int dim, int n_u, int n_l );   \/\/ init with dim,n_u,n_l$/;"	p	class:tk::band_matrix	access:public	signature:( int dim, int n_u, int n_l )
resize	./src/spline.cpp	/^void band_matrix::resize ( int dim, int n_u, int n_l )$/;"	f	class:tk::band_matrix	signature:( int dim, int n_u, int n_l )
run	./include/starchem.h	/^    void run();$/;"	p	class:StarChem	access:public	signature:()
run	./src/starchem.cpp	/^StarChem::run()$/;"	f	class:StarChem	signature:()
saturation	./include/cell.h	/^    double saturation;$/;"	m	struct:cell_partial	access:public
saved_diag	./include/spline.h	/^    double  saved_diag ( int i ) const;$/;"	p	class:tk::band_matrix	access:public	signature:( int i ) const
saved_diag	./include/spline.h	/^    double &saved_diag ( int i );$/;"	p	class:tk::band_matrix	access:public	signature:( int i )
saved_diag	./src/spline.cpp	/^double &band_matrix::saved_diag ( int i )$/;"	f	class:tk::band_matrix	signature:( int i )
saved_diag	./src/spline.cpp	/^double band_matrix::saved_diag ( int i ) const$/;"	f	class:tk::band_matrix	signature:( int i ) const
sc_config	./include/starchem.h	/^    configuration                 sc_config;$/;"	m	class:StarChem	access:private
second_deriv	./include/spline.h	/^        second_deriv = 2$/;"	e	enum:tk::spline::bd_type
set_boundary	./include/spline.h	/^    void set_boundary ( bd_type left, double left_value,$/;"	p	class:tk::spline	access:public	signature:( bd_type left, double left_value, bd_type right, double right_value, bool force_linear_extrapolation = false )
set_boundary	./src/spline.cpp	/^void spline::set_boundary ( spline::bd_type left, double left_value,$/;"	f	class:tk::spline	signature:( spline::bd_type left, double left_value, spline::bd_type right, double right_value, bool force_linear_extrapolation )
set_data	./include/interp2D.h	/^    void set_data ( const axes2D &input_axis, const std::vector<data2D> &input_data );$/;"	p	class:interp2D	access:public	signature:( const axes2D &input_axis, const std::vector<data2D> &input_data )
set_data	./src/interp2D.cpp	/^interp2D::set_data ( const axes2D &input_axis, const std::vector<data2D> &input_data )$/;"	f	class:interp2D	signature:( const axes2D &input_axis, const std::vector<data2D> &input_data )
set_env_data	./include/cell.h	/^    void set_env_data ( const cell_input &input_data );$/;"	p	class:cell	access:private	signature:( const cell_input &input_data )
set_env_data	./src/cell.cpp	/^cell::set_env_data ( const cell_input &input_data )$/;"	f	class:cell	signature:( const cell_input &input_data )
set_following	./include/starchem.h	/^    void set_following ( const spec_v &following_list )$/;"	f	class:StarChem	access:public	signature:( const spec_v &following_list )
set_init_abundances	./include/cell.h	/^    void set_init_abundances ( const spec_v &init_s, const cell_input &init_data );$/;"	p	class:cell	access:private	signature:( const spec_v &init_s, const cell_input &init_data )
set_init_abundances	./src/cell.cpp	/^cell::set_init_abundances ( const spec_v &init_s, const cell_input &init_data )$/;"	f	class:cell	signature:( const spec_v &init_s, const cell_input &init_data )
set_points	./include/spline.h	/^    void set_points ( const std::vector<double> &x,$/;"	p	class:tk::spline	access:public	signature:( const std::vector<double> &x, const std::vector<double> &y, bool cubic_spline = true )
set_points	./src/spline.cpp	/^void spline::set_points ( const std::vector<double> &x,$/;"	f	class:tk::spline	signature:( const std::vector<double> &x, const std::vector<double> &y, bool cubic_spline )
shapeFactor	./include/constants.h	/^const double shapeFactor = pow ( 36.0 * M_PI, 1. \/ 3. );$/;"	m	namespace:constants
solution_abundances	./include/cell.h	/^    std::vector<abundance_v> solution_abundances;$/;"	m	class:cell	access:private
solution_times	./include/cell.h	/^    std::vector<double> solution_times;$/;"	m	class:cell	access:private
solution_vars	./include/cell.h	/^    std::vector<cell_state> solution_vars;$/;"	m	class:cell	access:private
solve	./include/cell.h	/^    void solve ( const configuration &c , const spec_v& foll );$/;"	p	class:cell	access:public	signature:( const configuration &c , const spec_v& foll )
solve	./src/cell.cpp	/^cell::solve ( const configuration &config, const spec_v& foll )$/;"	f	class:cell	signature:( const configuration &config, const spec_v& foll )
spec_rule	./include/network.h	/^    qi::rule<Iterator, spec_v(), Skipper> spec_rule;$/;"	m	struct:network_parser	access:public
spec_v	./include/reaction.h	/^typedef std::vector<std::string> spec_v;$/;"	t
species	./include/network.h	/^    std::vector<std::string> species;$/;"	m	struct:network	access:public
spline	./include/spline.h	/^    spline() : m_left ( second_deriv ), m_right ( second_deriv ),$/;"	f	class:tk::spline	access:public	signature:()
spline	./include/spline.h	/^class spline$/;"	c	namespace:tk
state_vars	./include/cell.h	/^    cell_state state_vars;$/;"	m	class:cell	access:private
temperature	./include/cell.h	/^    double temperature;$/;"	m	struct:cell_state	access:public
temperature_0	./include/configuration.h	/^    double temperature_0;$/;"	m	struct:configuration	access:public
tk	./include/spline.h	/^namespace tk$/;"	n
tk	./src/spline.cpp	/^namespace tk$/;"	n	file:
tk::band_matrix	./include/spline.h	/^class band_matrix$/;"	c	namespace:tk
tk::band_matrix::band_matrix	./include/spline.h	/^    band_matrix ( int dim, int n_u, int n_l );    \/\/ constructor$/;"	p	class:tk::band_matrix	access:public	signature:( int dim, int n_u, int n_l )
tk::band_matrix::band_matrix	./include/spline.h	/^    band_matrix() {};                             \/\/ constructor$/;"	f	class:tk::band_matrix	access:public	signature:()
tk::band_matrix::band_matrix	./src/spline.cpp	/^band_matrix::band_matrix ( int dim, int n_u, int n_l )$/;"	f	class:tk::band_matrix	signature:( int dim, int n_u, int n_l )
tk::band_matrix::dim	./include/spline.h	/^    int dim() const;                             \/\/ matrix dimension$/;"	p	class:tk::band_matrix	access:public	signature:() const
tk::band_matrix::dim	./src/spline.cpp	/^int band_matrix::dim() const$/;"	f	class:tk::band_matrix	signature:() const
tk::band_matrix::l_solve	./include/spline.h	/^    std::vector<double> l_solve ( const std::vector<double> &b ) const;$/;"	p	class:tk::band_matrix	access:public	signature:( const std::vector<double> &b ) const
tk::band_matrix::l_solve	./src/spline.cpp	/^std::vector<double> band_matrix::l_solve ( const std::vector<double> &b ) const$/;"	f	class:tk::band_matrix	signature:( const std::vector<double> &b ) const
tk::band_matrix::lu_decompose	./include/spline.h	/^    void lu_decompose();$/;"	p	class:tk::band_matrix	access:public	signature:()
tk::band_matrix::lu_decompose	./src/spline.cpp	/^void band_matrix::lu_decompose()$/;"	f	class:tk::band_matrix	signature:()
tk::band_matrix::lu_solve	./include/spline.h	/^    std::vector<double> lu_solve ( const std::vector<double> &b,$/;"	p	class:tk::band_matrix	access:public	signature:( const std::vector<double> &b, bool is_lu_decomposed = false )
tk::band_matrix::lu_solve	./src/spline.cpp	/^std::vector<double> band_matrix::lu_solve ( const std::vector<double> &b,$/;"	f	class:tk::band_matrix	signature:( const std::vector<double> &b, bool is_lu_decomposed )
tk::band_matrix::m_lower	./include/spline.h	/^    std::vector< std::vector<double> > m_lower;  \/\/ lower band$/;"	m	class:tk::band_matrix	access:private
tk::band_matrix::m_upper	./include/spline.h	/^    std::vector< std::vector<double> > m_upper;  \/\/ upper band$/;"	m	class:tk::band_matrix	access:private
tk::band_matrix::num_lower	./include/spline.h	/^    int num_lower() const$/;"	f	class:tk::band_matrix	access:public	signature:() const
tk::band_matrix::num_upper	./include/spline.h	/^    int num_upper() const$/;"	f	class:tk::band_matrix	access:public	signature:() const
tk::band_matrix::operator ()	./include/spline.h	/^    double   operator () ( int i, int j ) const;    \/\/ read$/;"	p	class:tk::band_matrix	access:public	signature:( int i, int j ) const
tk::band_matrix::operator ()	./include/spline.h	/^    double &operator () ( int i, int j );           \/\/ write$/;"	p	class:tk::band_matrix	access:public	signature:( int i, int j )
tk::band_matrix::operator ()	./src/spline.cpp	/^double &band_matrix::operator () ( int i, int j )$/;"	f	class:tk::band_matrix	signature:( int i, int j )
tk::band_matrix::operator ()	./src/spline.cpp	/^double band_matrix::operator () ( int i, int j ) const$/;"	f	class:tk::band_matrix	signature:( int i, int j ) const
tk::band_matrix::r_solve	./include/spline.h	/^    std::vector<double> r_solve ( const std::vector<double> &b ) const;$/;"	p	class:tk::band_matrix	access:public	signature:( const std::vector<double> &b ) const
tk::band_matrix::r_solve	./src/spline.cpp	/^std::vector<double> band_matrix::r_solve ( const std::vector<double> &b ) const$/;"	f	class:tk::band_matrix	signature:( const std::vector<double> &b ) const
tk::band_matrix::resize	./include/spline.h	/^    void resize ( int dim, int n_u, int n_l );   \/\/ init with dim,n_u,n_l$/;"	p	class:tk::band_matrix	access:public	signature:( int dim, int n_u, int n_l )
tk::band_matrix::resize	./src/spline.cpp	/^void band_matrix::resize ( int dim, int n_u, int n_l )$/;"	f	class:tk::band_matrix	signature:( int dim, int n_u, int n_l )
tk::band_matrix::saved_diag	./include/spline.h	/^    double  saved_diag ( int i ) const;$/;"	p	class:tk::band_matrix	access:public	signature:( int i ) const
tk::band_matrix::saved_diag	./include/spline.h	/^    double &saved_diag ( int i );$/;"	p	class:tk::band_matrix	access:public	signature:( int i )
tk::band_matrix::saved_diag	./src/spline.cpp	/^double &band_matrix::saved_diag ( int i )$/;"	f	class:tk::band_matrix	signature:( int i )
tk::band_matrix::saved_diag	./src/spline.cpp	/^double band_matrix::saved_diag ( int i ) const$/;"	f	class:tk::band_matrix	signature:( int i ) const
tk::band_matrix::~band_matrix	./include/spline.h	/^    ~band_matrix() {};                            \/\/ destructor$/;"	f	class:tk::band_matrix	access:public	signature:()
tk::spline	./include/spline.h	/^class spline$/;"	c	namespace:tk
tk::spline::bd_type	./include/spline.h	/^    enum bd_type$/;"	g	class:tk::spline	access:public
tk::spline::first_deriv	./include/spline.h	/^        first_deriv = 1,$/;"	e	enum:tk::spline::bd_type
tk::spline::m_a	./include/spline.h	/^    std::vector<double> m_a, m_b, m_c;      \/\/ spline coefficients$/;"	m	class:tk::spline	access:private
tk::spline::m_b	./include/spline.h	/^    std::vector<double> m_a, m_b, m_c;      \/\/ spline coefficients$/;"	m	class:tk::spline	access:private
tk::spline::m_b0	./include/spline.h	/^    double  m_b0, m_c0;                     \/\/ for left extrapol$/;"	m	class:tk::spline	access:private
tk::spline::m_c	./include/spline.h	/^    std::vector<double> m_a, m_b, m_c;      \/\/ spline coefficients$/;"	m	class:tk::spline	access:private
tk::spline::m_c0	./include/spline.h	/^    double  m_b0, m_c0;                     \/\/ for left extrapol$/;"	m	class:tk::spline	access:private
tk::spline::m_force_linear_extrapolation	./include/spline.h	/^    bool    m_force_linear_extrapolation;$/;"	m	class:tk::spline	access:private
tk::spline::m_left	./include/spline.h	/^    bd_type m_left, m_right;$/;"	m	class:tk::spline	access:private
tk::spline::m_left_value	./include/spline.h	/^    double  m_left_value, m_right_value;$/;"	m	class:tk::spline	access:private
tk::spline::m_right	./include/spline.h	/^    bd_type m_left, m_right;$/;"	m	class:tk::spline	access:private
tk::spline::m_right_value	./include/spline.h	/^    double  m_left_value, m_right_value;$/;"	m	class:tk::spline	access:private
tk::spline::m_x	./include/spline.h	/^    std::vector<double> m_x, m_y;           \/\/ x,y coordinates of points$/;"	m	class:tk::spline	access:private
tk::spline::m_y	./include/spline.h	/^    std::vector<double> m_x, m_y;           \/\/ x,y coordinates of points$/;"	m	class:tk::spline	access:private
tk::spline::operator ()	./include/spline.h	/^    double operator() ( double x ) const;$/;"	p	class:tk::spline	access:public	signature:( double x ) const
tk::spline::operator ()	./src/spline.cpp	/^double spline::operator() ( double x ) const$/;"	f	class:tk::spline	signature:( double x ) const
tk::spline::second_deriv	./include/spline.h	/^        second_deriv = 2$/;"	e	enum:tk::spline::bd_type
tk::spline::set_boundary	./include/spline.h	/^    void set_boundary ( bd_type left, double left_value,$/;"	p	class:tk::spline	access:public	signature:( bd_type left, double left_value, bd_type right, double right_value, bool force_linear_extrapolation = false )
tk::spline::set_boundary	./src/spline.cpp	/^void spline::set_boundary ( spline::bd_type left, double left_value,$/;"	f	class:tk::spline	signature:( spline::bd_type left, double left_value, spline::bd_type right, double right_value, bool force_linear_extrapolation )
tk::spline::set_points	./include/spline.h	/^    void set_points ( const std::vector<double> &x,$/;"	p	class:tk::spline	access:public	signature:( const std::vector<double> &x, const std::vector<double> &y, bool cubic_spline = true )
tk::spline::set_points	./src/spline.cpp	/^void spline::set_points ( const std::vector<double> &x,$/;"	f	class:tk::spline	signature:( const std::vector<double> &x, const std::vector<double> &y, bool cubic_spline )
tk::spline::spline	./include/spline.h	/^    spline() : m_left ( second_deriv ), m_right ( second_deriv ),$/;"	f	class:tk::spline	access:public	signature:()
tk::spline::val_and_deriv	./include/spline.h	/^    void val_and_deriv ( const double x, double &val, double &deriv );$/;"	p	class:tk::spline	access:public	signature:( const double x, double &val, double &deriv )
tk::spline::val_and_deriv	./src/spline.cpp	/^void spline::val_and_deriv ( const double x, double &val, double &deriv )$/;"	f	class:tk::spline	signature:( const double x, double &val, double &deriv )
type	./include/reaction.h	/^    int type;$/;"	m	struct:reaction	access:public
val_and_deriv	./include/spline.h	/^    void val_and_deriv ( const double x, double &val, double &deriv );$/;"	p	class:tk::spline	access:public	signature:( const double x, double &val, double &deriv )
val_and_deriv	./src/spline.cpp	/^void spline::val_and_deriv ( const double x, double &val, double &deriv )$/;"	f	class:tk::spline	signature:( const double x, double &val, double &deriv )
vm	./include/configuration.h	/^    options::variables_map        vm;$/;"	m	struct:configuration	access:public
volume	./include/cell.h	/^    double volume;$/;"	m	struct:cell_state	access:public
x	./include/interp2D.h	/^    std::vector<double> x;$/;"	m	struct:axis	access:public
~CellObserver	./include/cellobserver.h	/^    virtual ~CellObserver() {}$/;"	f	class:CellObserver	access:public	signature:()
~StarChem	./include/starchem.h	/^    virtual ~StarChem() {}$/;"	f	class:StarChem	access:public	signature:()
~band_matrix	./include/spline.h	/^    ~band_matrix() {};                            \/\/ destructor$/;"	f	class:tk::band_matrix	access:public	signature:()
~cell	./include/cell.h	/^    virtual ~cell() { };$/;"	f	class:cell	access:public	signature:()
~interp2D	./include/interp2D.h	/^    virtual ~interp2D() {}$/;"	f	class:interp2D	access:public	signature:()
~netcdf_reader	./include/interp2D.h	/^    virtual ~netcdf_reader() {}$/;"	f	class:netcdf_reader	access:public	signature:()
~network	./include/network.h	/^    virtual ~network();$/;"	p	struct:network	access:public	signature:()
~network	./src/network.cpp	/^network::~network()$/;"	f	class:network	signature:()
~reaction	./include/reaction.h	/^    ~reaction() {}$/;"	f	struct:reaction	access:public	signature:()
